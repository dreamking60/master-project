FROM ubuntu:20.04

WORKDIR /home

# Set timezone to avoid interactive prompt
ENV TZ=America/Chicago
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install basic dependencies for ORB-SLAM3 and development tools
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    cmake \
    build-essential \
    git \
    pkg-config \
    libeigen3-dev \
    libopencv-dev \
    libopencv-contrib-dev \
    libboost-all-dev \
    libssl-dev \
    libfmt-dev \
    libblas-dev \
    liblapack-dev \
    libsuitesparse-dev \
    libgl1-mesa-dev \
    libglew-dev \
    libwayland-dev \
    libxkbcommon-dev \
    wayland-protocols \
    libegl1-mesa-dev \
    libepoxy-dev \
    lsb-release \
    gnupg2 \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Clang and LLVM
RUN apt-get update && apt-get install -y \
    clang \
    lld \
    llvm \
    && rm -rf /var/lib/apt/lists/*

ENV CC=clang
ENV CXX=clang++

# Build and install Pangolin first
WORKDIR /home
COPY Pangolin/ Pangolin/
WORKDIR /home/Pangolin
RUN mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_FLAGS="-Wno-error=missing-braces -Wno-error=type-limits" && \
    make -j4 && \
    make install && \
    ldconfig
    
# Copy and build ORB-SLAM3 elastic library
WORKDIR /home
COPY orb-slam-elastic/ orb-slam-elastic/
WORKDIR /home/orb-slam-elastic

# Fix OpenCV version check and compilation flags
RUN sed -i 's/find_package(OpenCV 3.0)/find_package(OpenCV 4.0)/' CMakeLists.txt
RUN sed -i 's/-march=native/-mtune=generic/g' CMakeLists.txt
RUN sed -i 's/-march=native/-mtune=generic/g' Thirdparty/g2o/CMakeLists.txt
RUN sed -i 's/-march=native/-mtune=generic/g' Thirdparty/DBoW2/CMakeLists.txt
RUN sed -i 's/-march=native/-mtune=generic/g' Examples/ROS/OO_SLAM3/CMakeLists.txt
RUN sed -i 's/-march=native/-mtune=generic/g' Examples_old/ROS/ORB_SLAM3/CMakeLists.txt

# Fix header includes
RUN sed -i 's|<stdint-gcc.h>|<cstdint>|' src/ORBmatcher.cc
RUN sed -i 's|<stdint-gcc.h>|<cstdint>|' Thirdparty/DBoW2/DBoW2/FORB.h
RUN sed -i 's|<stdint-gcc.h>|<cstdint>|' Thirdparty/DBoW2/DBoW2/FORB.cpp
RUN sed -i '/#include <utility>/a #include <iostream>' include/ImuTypes.h

# Replace C++11/C++0x support check with C++14 standard
RUN sed -i '/# Check C++11 or C++0x support/,/endif()/c\# Set C++14 standard\
set(CMAKE_CXX_STANDARD 14)\
set(CMAKE_CXX_STANDARD_REQUIRED ON)\
set(CMAKE_CXX_EXTENSIONS OFF)' CMakeLists.txt

# Build ThirdParty libraries first
RUN echo "Building ThirdParty/DBoW2..." && \
    cd Thirdparty/DBoW2 && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j4

RUN echo "Building ThirdParty/g2o..." && \
    cd Thirdparty/g2o && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j4

RUN echo "Building ThirdParty/Sophus..." && \
    cd Thirdparty/Sophus && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j4

# Build ORB-SLAM3 core library
RUN chmod +x build.sh build_ros.sh && \
    ./build.sh

# Install ROS Noetic after core library is built
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
    apt-get update && \
    apt-get install -y \
    ros-noetic-desktop-full \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    python3-catkin-tools \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Setup ROS environment
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
ENV ROS_DISTRO=noetic
ENV ROS_ROOT=/opt/ros/noetic/share/ros
ENV ROS_PACKAGE_PATH=/opt/ros/noetic/share

# Build ROS nodes after ROS is installed
RUN . /opt/ros/noetic/setup.sh && \
    ./build_ros.sh

# Install AFL++ for fuzzing
WORKDIR /home
RUN git clone https://github.com/AFLplusplus/AFLplusplus.git && \
    cd AFLplusplus && \
    make distrib && \
    make install && \
    make install-man

# Install Rust nightly
WORKDIR /home
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path && \
    rustup toolchain install nightly && \
    rustup default nightly

# Install cargo-fuzz
RUN cargo install cargo-fuzz

# Create Rust fuzzing example
WORKDIR /home/rust-example
RUN cargo init
RUN cargo fuzz init
COPY fuzz_safe_copy.rs fuzz/fuzz_targets/fuzz_target_1.rs

# Create C fuzzing example
WORKDIR /home
RUN mkdir -p c-example/in
COPY fuzz_simple.c c-example/
RUN afl-clang-fast -o c-example/fuzz_simple c-example/fuzz_simple.c
RUN echo "test-stevenchen" > c-example/in/test

# Back to home directory
WORKDIR /home

# Set final command
CMD ["sh", "-c", "echo 'Ubuntu 20.04 + AFL++ + Rust + ORB-SLAM3 + ROS Noetic environment is ready!'; \
     echo 'Run C fuzzer: afl-fuzz -i c-example/in -o c-example/out -- c-example/fuzz_simple @@'; \
     echo 'Run Rust fuzzer: cd rust-example && cargo fuzz run fuzz_target_1'; \
     echo 'ORB-SLAM3 library with ROS support is available in: /home/orb-slam-elastic/'; \
     echo 'To use ROS: source /opt/ros/noetic/setup.bash'; \
     exec sh"]
